# 配置m站pct项目服务
server{
  listen 80; # 配置端口号，注意多个server时listen不能加default backlog=2048，因为添加后无法配置多个服务器
  server_name m.sycho.cn; # 指定服务器域名，子域名，ip都可以
  charset utf-8;
  #root html/all/pct; #这里可不配置，在location里配置即可
  #index index.html; 
  
  #http与https共存的配置
  #证书上传到/usr/local/nginx/conf目录下即可
  listen 443 ssl;
  ssl off; #这个要关掉才能共存t; #加载ssl证书
  ssl_certificate 1_m.sycho.cn_bundle.crt; #加载ssl证书
  ssl_certificate_key 2_m.sycho.cn.key; #加载ssl密匙
  ssl_session_timeout 5m;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; #按照这个套件配置
  ssl_prefer_server_ciphers on;
  
  #所有以/开头的地址，实际上是所有请求
  location / {
    root html/all/pct; # 配置项目的根目录
	#root html/all/football;
    try_files $uri $uri/ @router; # vue history 模式需要配置 否则404错误 下面那个也可以
    #try_files $uri $uri/ /index.html;
    index index.html; # 指定首页响应地址
  }
  
  # 匹配带api的请求的反向代理，解决跨域问题
  location ^~ /v2/ {
    #proxy_pass设置反向代理
    #注意区别proxy_pass转发的路径后是否带 “/”，有带/则http请求不会带上api/v1，没有带/，则api/v1会加上。
    proxy_pass https://m.purcotton.com/;  
	#proxy_pass https://www.dongqiudi.com/;  
    proxy_set_header Host $http_host;
  }
  
  location @router {
    rewrite ^.*$ /index.html last;
  }
  #指定日志输出地址文件
  access_log off;
}

# 配置app站football项目服务
server {
  listen 80;
	server_name app.sycho.cn;
	charset utf-8;
  
	# http与https共存配置
	listen 443 ssl;
	ssl off; #这个要关掉才能共存t; #加载ssl证书
	ssl_certificate 1_app.sycho.cn_bundle.crt; #加载ssl证书
	ssl_certificate_key 2_app.sycho.cn.key; #加载ssl密匙
	ssl_session_timeout 5m;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置
	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; #按照这个套件配置
	ssl_prefer_server_ciphers on;
	
    location / {
			root html/all/football;
			try_files $uri $uri/ @router;  
			#try_files $uri $uri/ /index.html;
			index index.html;
		}
	
	# 匹配带api的请求的反向代理，解决跨域问题
	location ^~ /v1/ {
		#proxy_pass设置反向代理
		#注意区别proxy_pass转发的路径后是否带 “/”，有带/则http请求不会带上api，没有带/，则api会加上。
		proxy_pass https://www.dongqiudi.com/;  
		proxy_set_header Host $http_host;
	}
	location @router {
		rewrite ^.*$ /index.html last;
	}
	#指定日志输出地址文件
	access_log off;
}

#配置www项目服务
#通过upstream nodejs 可以配置多台nodejs节点，做负载均衡
#keepalive 设置存活时间。如果不设置可能会产生大量的timewait
#proxy_pass 反向代理转发 http://nodejs

upstream nodenuxt {
    server 127.0.0.1:9527; #nuxt项目通过pm2开启的koa服务，通过负载均衡监听这个ip地址
    keepalive 64;
}

server {
	# listen不能加default backlog=2048，因为添加后无法配置多个服务器
  listen 80;
	server_name www.sycho.cn; # www.sycho.cn === sycho.cn
	charset utf-8;
  
	#http与https共存的配置
	#证书上传到/usr/local/nginx/conf目录下即可
	listen 443 ssl;
	ssl off; #这个要关掉才能共存t; #加载ssl证书
	ssl_certificate 1_sycho.cn_bundle.crt; #加载ssl证书
	ssl_certificate_key 2_sycho.cn.key; #加载ssl密匙
	ssl_session_timeout 5m;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置
	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; #按照这个套件配置
	ssl_prefer_server_ciphers on;
	
	#以下两个location配置，实现在当前域名下，通过指定根目录，来运行多个vue项目
    location /football {
		#使用了反向代理端口后，这里不能使用root只能使用alias
        #root html/all/football;
		# alias存放静态网页的路径
		alias html/all/football;
		# 指定首页，可修改
        index index.html;
        try_files $uri $uri/ /index.html;
    }
	
	location /pct {
		#使用了反向代理端口后，这里不能使用root只能使用alias
		alias html/all/pct;
        index index.html;
        try_files $uri $uri/ /index.html;
    }

	location /run {
		#使用了反向代理端口后，这里不能使用root只能使用alias
		alias html/all/run;
        index index.html;
        try_files $uri $uri/ /index.html;
    }
	
    location / {
		#反向代理node服务监听端口无需配置root，try_files，index
		#root html/all;
		#vue history 模式需要配置 否则404错误
		#try_files $uri $uri/ @router;  # 这个配置会导致nuxt资料路径错误
		#try_files $uri $uri/ /index.html;
		#首页响应地址
		#index index.html;
		# 下列为监听pm2启的nuxt服务
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;  
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Nginx-Proxy true;
        proxy_cache_bypass $http_upgrade;
        proxy_pass http://nodenuxt; #反向代理node服务器端口
    }
	
	 # 匹配带api的请求，api反向代理
	location ^~ /v1/ {
		#proxy_pass设置反向代理
		#注意区别proxy_pass转发的路径后是否带 “/”，有带/则http请求不会带上api，没有带/，则api会加上。
		proxy_pass https://www.dongqiudi.com/;  
		proxy_set_header Host $http_host;
	}
	
	location ^~ /v2/ {
		#proxy_pass设置反向代理
		#注意区别proxy_pass转发的路径后是否带 “/”，有带/则http请求不会带上api，没有带/，则api会加上。
		proxy_pass https://m.purcotton.com/; 
		proxy_set_header Host $http_host;
	}
	
	location @router {
		rewrite ^.*$ /index.html last;
	}
	#指定日志输出地址文件
	access_log off;
}

# 配置admin后台管理服务系统
upstream nodekoa {
    server 127.0.0.1:1008; #koa及后台项目
    keepalive 64;
}

server {
	# listen不能加default backlog=2048，因为添加后无法配置多个服务器
  listen 80;
	server_name admin.sycho.cn; 
	charset utf-8;
  
	#http与https共存的配置
	#证书上传到/usr/local/nginx/conf目录下即可
	listen 443 ssl;
	ssl off; #这个要关掉才能共存t; #加载ssl证书
	ssl_certificate 1_admin.sycho.cn_bundle.crt; #加载ssl证书
	ssl_certificate_key 2_admin.sycho.cn.key; #加载ssl密匙
	ssl_session_timeout 5m;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置
	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; #按照这个套件配置
	ssl_prefer_server_ciphers on;
	
	location / {
	    #反向代理node服务监听端口无需配置root，try_files，index
	    # 下列为监听koa2启的后台服务
       	    proxy_set_header    X-Real-IP $remote_addr;
            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header    Host  $http_host;
            proxy_set_header    X-Nginx-Proxy true;
            proxy_set_header    Connection "";
            proxy_pass http://nodekoa;
        } 	
	location @router {
		rewrite ^.*$ /index.html last;
	}
	#指定日志输出地址文件
	access_log off;
}
